variables:
  MAVEN_CACHE_FOLDER: $(Pipeline.Workspace)/.m2/repository
  MAVEN_OPTS: '-Dmaven.repo.local=$(MAVEN_CACHE_FOLDER)'
  isMain: $[eq(variables['Build.SourceBranch'], 'refs/heads/main')]
  isRelease: $[eq(variables['Build.SourceBranch'], 'refs/heads/release-az-pipeline')]
  NAME: cmeapi
  VERSION: ''

trigger:
  branches:
    include:
      - azure-pipeline-cicd-cmeapi
    exclude:
      - az-pipeline-cache/*

pool:
  vmImage: ubuntu-16.04
  
stages:
 - stage: Build
   jobs:
   - job: Build
     steps:
     - task: Cache@2
       inputs:
         key: 'maven | "$(Agent.OS)" | **/pom.xml'
         restoreKeys: |
           maven | "$(Agent.OS)"
           maven
         path: $(MAVEN_CACHE_FOLDER)
       displayName: Cache Maven local repo
     - task: SonarSource.sonarqube.15B84CA1-B62F-4A2A-A403-89B77A063157.SonarQubePrepare@4
       #condition: and(succeeded(), eq(variables.isRelease, true))
       displayName: 'Prepare analysis on SonarQube'
       inputs:
         SonarQube: SonarQube
         scannerMode: Other
         extraProperties: |
          # Additional properties that will be passed to the scanner, 
          # Put one key=value per line, example:
          # sonar.exclusions=**/*.bin
          sonar.branch.name=$(Build.SourceBranchName)
     - task: JFrog.jfrog-artifactory-vsts-extension.artifactory-maven.ArtifactoryMaven@2
       displayName: Prepare Artifact and Version Extraction
       inputs:
         goals: clean install -N -X -q -DforceStdout org.codehaus.mojo:exec-maven-plugin:3.0.0:exec -Dexec.executable='echo' -Dexec.args='${project.artifactId}' --log-file log.txt
         options: '-Dmaven.test.skip=true $(MAVEN_OPTS)' 
         mavenOptions: '-Xmx3072m $(MAVEN_OPTS)'
         artifactoryResolverService: 'Artifactory-ZAccount'
         targetResolveReleaseRepo: 'maven-public'
         targetResolveSnapshotRepo: snapshots
         artifactoryDeployService: 'Artifactory-ZAccount'
         targetDeployReleaseRepo: 'dev-releases'
         targetDeploySnapshotRepo: snapshots  
     - task: Bash@3
       displayName: Extract Build Version**
       inputs:
         targetType: 'inline'
         script: |
             ls
             cat log.txt
             VER=$(grep version pom.xml | grep -v '<?xml' | grep '<version>'|head -n 1|awk '{print $1}'| cut -d'>' -f 2 | cut -d'<' -f 1)
             echo $VER
             echo "##vso[task.setvariable variable=VERSION]$VER"
        #  script: |
        #    VER=`mvn -N -X -q -DforceStdout org.codehaus.mojo:exec-maven-plugin:3.0.0:exec -Dexec.executable='echo' -Dexec.args='${project.version}'`
        #    echo "##vso[task.setvariable variable=VERSION]$VER"
        
     - bash: |
               echo Maven opts - $(MAVEN_OPTS)
               VER=`mvn -N -X -q $(MAVEN_OPTS) -DforceStdout org.codehaus.mojo:exec-maven-plugin:3.0.0:exec -Dexec.executable='echo' -Dexec.args='${project.artifactId}'`
               echo "##vso[task.setvariable variable=VERSION]$VER"
               echo Build Version $VERSION
       displayName: Extract Build Version

     - bash: |
               echo Maven opts - $(MAVEN_OPTS)
               NAME=`mvn -N -X -q $(MAVEN_OPTS) -DforceStdout org.codehaus.mojo:exec-maven-plugin:3.0.0:exec -Dexec.executable='echo' -Dexec.args='${project.name}'`
               echo "##vso[task.setvariable variable=NAME]$NAME"
               echo Build Name $NAME
       displayName: Extract Build Name
     - task: JFrog.jfrog-artifactory-vsts-extension.artifactory-maven.ArtifactoryMaven@2
       displayName: Build
       inputs:
         goals: 'clean package'
         options: '-Dmaven.test.skip=true $(MAVEN_OPTS)' 
         mavenOptions: '-Xmx3072m $(MAVEN_OPTS)'
         artifactoryResolverService: 'Artifactory-ZAccount'
         targetResolveReleaseRepo: 'maven-public'
         targetResolveSnapshotRepo: snapshots
         artifactoryDeployService: 'Artifactory-ZAccount'
         targetDeployReleaseRepo: 'dev-releases'
         targetDeploySnapshotRepo: snapshots
         collectBuildInfo: true
         buildName: ${NAME}
         buildNumber: ${VERSION}
     - task: JFrog.jfrog-artifactory-vsts-extension.artifactory-maven.ArtifactoryMaven@2
       condition: and(succeeded(), eq(variables.isRelease, true))
       displayName: 'Sonar Analysis'
       inputs:
         goals: 'sonar:sonar'
         options: '-Dmaven.test.skip=true'
         artifactoryResolverService: 'Artifactory-ZAccount'
         targetResolveReleaseRepo: 'maven-public'
         targetResolveSnapshotRepo: snapshots
         artifactoryDeployService: 'Artifactory-ZAccount'
         targetDeployReleaseRepo: 'dev-releases'
         targetDeploySnapshotRepo: snapshots
         collectBuildInfo: true
         buildName: ${NAME}
         buildNumber: ${VERSION}

     - task: SonarSource.sonarqube.291ed61f-1ee4-45d3-b1b0-bf822d9095ef.SonarQubePublish@4
       condition: and(succeeded(), eq(variables.isRelease, true))
       displayName: 'Publish Quality Gate Result'
     - task: JFrog.jfrog-artifactory-vsts-extension.artifactory-publish-build-info.ArtifactoryPublishBuildInfo@1
       displayName: 'Artifactory Publish Build Info'
       inputs:
         artifactoryService: 'Artifactory-ZAccount'
         buildName: ${NAME}
         buildNumber: ${VERSION}

     - task: CopyFiles@2
       inputs:
         contents: '**/*.war'
         targetFolder: '$(build.artifactStagingDirectory)'
     - task: PublishBuildArtifacts@1
       inputs:
         artifactName: 'war'
         pathToPublish: '$(build.artifactStagingDirectory)'         

        
 - stage: Deploy
   jobs:
   - job: Deploy
     #pool:
       #vmImage: 'vs2017-win2016'
     steps:

     - task: DownloadBuildArtifacts@0
       displayName: 'Download Build Artifacts'
       inputs:
         buildType: 'specific'
         project: 'c63c9a5f-e738-4fb9-9df3-c4e61121961e'
         pipeline: '653'
         specificBuildWithTriggering: true
         buildVersionToDownload: 'latest'
         downloadType: 'specific'
         downloadPath: '$(System.ArtifactsDirectory)'

     - task: AzureRmWebAppDeployment@4
       displayName: 'Azure App Service Deploy: cmeapi-devopstest'
       inputs:
         ConnectionType: 'AzureRM'
         azureSubscription: 'ct-n-AptOpsComs-8375-sp'
         appType: 'webApp'
         WebAppName: 'cmeapi-devopstest'
         deployToSlotOrASE: true
         ResourceGroupName: 'ct-n-zeaus-cnctme-rg'
         SlotName: 'dev'
         packageForLinux: '$(System.ArtifactsDirectory)'
